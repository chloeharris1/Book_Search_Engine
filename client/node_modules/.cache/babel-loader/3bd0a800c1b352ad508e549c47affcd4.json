{"ast":null,"code":"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode'; // create a new class to instantiate for a user\n\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  } // check if user's logged in\n\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  } // check if token is expired\n\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token'); // this will reload the page and reset the state of the application\n\n    window.location.assign('/');\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["C:/Bootcamp/Book_Search_Engine/src/utils/auth.js"],"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,YAAnB,C,CAEA;;AACA,MAAMC,WAAN,CAAkB;AAChB;AACAC,EAAAA,UAAU,GAAG;AACX,WAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;AACD,GAJe,CAMhB;;;AACAC,EAAAA,QAAQ,GAAG;AACT;AACA,UAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd;AACA,WAAO,CAAC,CAACE,KAAF,IAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB,CAHS,CAGsC;AAChD,GAXe,CAahB;;;AACAC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AACpB,QAAI;AACF,YAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB;;AACA,UAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACnC,eAAO,IAAP;AACD,OAFD,MAEO,OAAO,KAAP;AACR,KALD,CAKE,OAAOC,GAAP,EAAY;AACZ,aAAO,KAAP;AACD;AACF;;AAEDR,EAAAA,QAAQ,GAAG;AACT;AACA,WAAOS,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACb;AACAH,IAAAA,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;AACAE,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACAR,IAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB,EAFO,CAGP;;AACAJ,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD;;AAzCe;;AA4ClB,eAAe,IAAIlB,WAAJ,EAAf","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}